[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    --cov=src/algokit
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=70
    -m "not slow"
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings

# Test markers
markers =
    unit: fast unit tests with mocks
    integration: minimal real training tests
    performance: full training runs
    slow: long-running tests (excluded from CI)
    rl: reinforcement learning tests
    sarsa: SARSA algorithm specific tests
    q_learning: Q-Learning algorithm specific tests
    dqn: Deep Q-Network algorithm specific tests
    ppo: Proximal Policy Optimization tests
    benchmark: cross-algorithm comparison tests
    data: schema/data parsing tests
    functional: cross-module logic tests
    e2e: end-to-end test flows

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:gymnasium.*
    ignore::UserWarning:matplotlib.*

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout settings (cross-platform compatible)
timeout = 300
timeout_method = thread

# Cross-platform path handling
# Use forward slashes for test paths (works on all platforms)
# testpaths is already defined above

# Parallel execution (when using pytest-xdist)
# Uncomment to enable parallel testing
# addopts = --numprocesses=auto --dist=loadfile

# Platform-specific settings
# These ensure consistent behavior across Mac, Linux, and Windows
