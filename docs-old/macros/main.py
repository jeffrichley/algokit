"""Main macro functions for AlgoKit documentation.

These functions are automatically loaded by MkDocs Macros.
"""

from datetime import datetime

from .page_generator import (
    get_algorithm_page_content,
    get_algorithms_by_family,
    get_all_algorithm_keys,
)


def test_macro():
    """Return a simple test message to verify macros are working."""
    return "ðŸŽ‰ **MkDocs Macros is working!** This message was generated by a Python function."


def get_current_date():
    """Return the current date in a formatted string."""
    return datetime.now().strftime("%B %d, %Y")


def get_project_info():
    """Return basic project information."""
    return {
        "name": "AlgoKit",
        "description": "A python implementation of control and learning algorithms",
        "status": "Active Development",
        "macros_enabled": True,
    }


def get_algorithm_families():
    """Return list of algorithm families for navigation."""
    return [
        "Dynamic Programming",
        "Reinforcement Learning",
        "Control",
        "MPC",
        "Hierarchical RL",
        "Planning",
        "Gaussian Process",
        "DMPs",
        "Real-Time Control",
    ]


def algorithm_page(algorithm_key: str) -> str:
    """Generate complete algorithm page content dynamically.

    This macro generates the full algorithm page content from YAML data,
    eliminating the need for static .md files.
    """
    content = get_algorithm_page_content(algorithm_key)
    if content is None:
        return f"Algorithm '{algorithm_key}' not found in algorithms.yaml"
    return content


def list_all_algorithms() -> str:
    """Return a list of all available algorithms."""
    algorithms = get_all_algorithm_keys()
    if not algorithms:
        return "No algorithms found in algorithms.yaml"

    result = "## Available Algorithms\n\n"
    for algo in algorithms:
        result += f"- [{algo}](./{algo}.md)\n"

    return result


def list_family_algorithms(family_key: str) -> str:
    """Return a list of algorithms in a specific family."""
    algorithms = get_algorithms_by_family(family_key)
    if not algorithms:
        return f"No algorithms found for family '{family_key}'"

    result = f"## {family_key.title()} Algorithms\n\n"
    for algo in algorithms:
        result += f"- [{algo}](./{algo}.md)\n"

    return result
