"""MkDocs Macros Module for Algorithm Documentation

This module provides macros and filters for rendering algorithm documentation
from YAML data using Jinja2 templates.
"""

from pathlib import Path

import yaml
from jinja2 import Environment, FileSystemLoader


def load_family_data(family_id: str) -> dict:
    """Load family data from YAML file."""
    data_dir = Path(__file__).parent / "mkdocs_plugins" / "data"
    family_file = data_dir / family_id / "family.yaml"

    if not family_file.exists():
        return {}

    with open(family_file) as f:
        return yaml.safe_load(f) or {}


def load_algorithm_data(family_id: str) -> list:
    """Load algorithm data for a family."""
    data_dir = Path(__file__).parent / "mkdocs_plugins" / "data"
    algorithms_dir = data_dir / family_id / "algorithms"

    if not algorithms_dir.exists():
        return []

    algorithms = []
    for algo_file in algorithms_dir.glob("*.yaml"):
        with open(algo_file) as f:
            algo_data = yaml.safe_load(f)
            if algo_data:
                # Add slug from filename if not present
                if "slug" not in algo_data:
                    algo_data["slug"] = algo_file.stem
                algorithms.append(algo_data)

    return algorithms


def render_family_page(family_id: str) -> str:
    """Render a family page using Jinja2 template."""
    # Load data
    family_data = load_family_data(family_id)
    if not family_data:
        return f"**Error:** Family '{family_id}' not found."

    algorithms = load_algorithm_data(family_id)

    # Set up Jinja2 environment
    template_dir = Path(__file__).parent / "mkdocs_plugins" / "templates"
    env = Environment(
        loader=FileSystemLoader(str(template_dir)),
        autoescape=False,  # We want markdown, not HTML
    )

    # Load and render template
    try:
        template = env.get_template("family_page.md")
        return template.render(family=family_data, algorithms=algorithms)
    except Exception as e:
        return f"**Error:** Template rendering error: {str(e)}"


def define_env(env):
    """Define the environment for MkDocs Macros.

    This function is called by mkdocs-macros to set up the Jinja2 environment
    with custom variables, macros, and filters.
    """

    # Add a simple test macro to verify the system works
    @env.macro
    def test_macro():
        """Test macro to verify macros are working."""
        return "ðŸŽ‰ **MkDocs Macros is working!** This message was generated by a Python function."

    # Add the family page macro
    @env.macro
    def family_page_macro(family_id: str) -> str:
        """Render a family page using YAML data and Jinja2 templates.

        Args:
            family_id: The ID of the family to render (e.g., 'dp', 'control')

        Returns:
            Rendered markdown content for the family page
        """
        return render_family_page(family_id)

    # Add a simple test variable
    env.variables["current_date"] = "September 4, 2025"
    env.variables["project_name"] = "AlgoKit"
    env.variables["project_description"] = (
        "A python implementation of control and learning algorithms"
    )
