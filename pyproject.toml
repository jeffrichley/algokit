[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"



[project]
name = "algokit"
dynamic = ["version", "readme"]
description = "A python implementation of control and learning algorithms"
authors = [
  {name = "Jeff Richley", email = "jeffrichley@gmail.com"}
]
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["python,control,learning,ai"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",

  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Typing :: Typed"
]
dependencies = [
  "autorom>=0.6.1",
  "gymnasium[atari,box2d,classic-control,mujoco,toy-text]>=1.2.0",
  "matplotlib>=3.7.0",
  "mkdocs-gen-files>=0.5.0",
  "mkdocs-git-revision-date-localized-plugin>=1.4.7",
  "mkdocs-macros-plugin>=1.3.9",
  "mkdocs-material>=9.6.18",
  "mkdocs-mermaid2-plugin>=1.2.2",
  "mkdocstrings[python]>=0.30.0",
  "networkx>=3.5",
  "numpy>=1.24.0,<2.0.0",
  "pydantic>=2.0.0",
  "pyyaml>=6.0.2",
  "rich>=14.1.0",
  "seaborn>=0.12.0",
  "sympy>=1.12,<2.0",
  "torch==2.2.2",
  "typer>=0.17.4",
]

[project.optional-dependencies]
viz = []

[project.scripts]
algokit = "algokit.cli.main:app"

[project.urls]
Homepage = "https://github.com/jeffrichley/algokit"
Documentation = "https://jeffrichley.github.io/algokit"
Repository = "https://github.com/jeffrichley/algokit.git"
"Bug Tracker" = "https://github.com/jeffrichley/algokit/issues"
Changelog = "https://github.com/jeffrichley/algokit/blob/main/CHANGELOG.md"
Source = "https://github.com/jeffrichley/algokit"

[tool.setuptools.dynamic]
version = {attr = "algokit.__version__"}
readme = {file = "README.md"}

[dependency-groups]
dev = [
  # Linting & formatting
  "ruff>=0.4.0",
  "pre-commit>=3.6",
  # Testing (integral to development)
  "hypothesis>=6.136.6",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=6.2.1",
  "coverage>=7.0.0",
  "pytest-html>=4.1.1",
  "pytest-mock>=3.14.1",
  "pytest-randomly>=3.16.0",
  "pytest-repeat>=0.9.4",
  "pytest-timeout>=2.4.0",
  "pytest-xdist>=3.8.0",
  "pytest-benchmark>=4.0.0",
  # Type checking
  "mypy>=1.17.0",
  "types-requests",
  "types-pyyaml>=6.0.12.20250516",
  "types-pillow>=10.2.0.20240822",
  "types-setuptools>=80.9.0.20250529",
  "types-urllib3>=1.26.25.14",
  # Security & quality analysis
  "pip-audit>=2.9.0",
  "vulture>=2.14",
  "radon>=6.0",
  "xenon>=0.9",
  # Development utilities
  "ipython>=8.10",
  "monkeytype>=23.3.0",
  "validate-pyproject>=0.24.1",
  "toml-sort>=0.24.2",
  "psutil>=7.0.0",
  "commitizen>=4.8.3",
  "codespell>=2.4.0",
  # Documentation (for development)
  "mkdocs-material>=9.5",
  "pytest-drill-sergeant>=0.1.0",
]
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.18",
  "mkdocs-mermaid2-plugin>=1.0.0",
  "mkdocs-git-revision-date-localized-plugin>=1.2.0",
  "mkdocstrings>=0.24.0",
  "mkdocstrings-python>=1.7.0",
  "mkdocs-macros-plugin>=1.3.9",
  "mkdocs-gen-files>=0.5.0",
  # Add pymdownx extensions for Material theme functionality
  "pymdown-extensions>=10.16.1",
  # Link checking for documentation
  "linkcheckmd>=1.4.0",
  # YAML validation CLI tools
  "typer>=0.12.0",
  "rich>=13.0.0",
  "cerberus>=1.3.0",
  "yamale>=6.0.0",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.report]
fail_under = 80
show_missing = true

[tool.mypy]
files = ["src", "tests"]
python_version = "3.12"
mypy_path = ["stubs"]

# Enable modern union syntax
enable_incomplete_feature = ["Unpack"]

# ✅ Basic safety (keep these)
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # was true → false
no_implicit_optional = true
strict_equality = true

# ✅ Any-type restrictions (relaxed for classroom)
disallow_any_unimported = false       # was true → false
disallow_any_expr = false             # was true → false
disallow_any_decorated = false        # was true → false
disallow_any_generics = false         # was true → false
disallow_subclassing_any = false      # was true → false

# ✅ Warning enforcement (keep useful, drop noisy)
warn_return_any = false               # was true → false
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = false

# ✅ Coverage enforcement
implicit_reexport = false

# ✅ Import type-checking
ignore_missing_imports = true # change to true *only for per-module overrides*
follow_imports = "normal"
show_error_codes = true

# ✅ Disable specific error codes for problematic imports
disable_error_code = ["import-untyped"]

# ✅ Clean output formatting
pretty = true
color_output = true
show_column_numbers = true
exclude = [
    ".*/OpenGL/GLUT/fonts.py"
]

# ---- Tests override: lighter rules for test code ----
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
ignore_missing_imports = true
disable_error_code = [
  "misc",
  "no-untyped-def",
  "attr-defined",
  "comparison-overlap",
  "var-annotated",
  "arg-type",
]


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.benchmark]
min_rounds = 5           # Minimum number of test rounds to run
max_time = 10.0          # Maximum time (seconds) to spend on each benchmark
warmup = true            # Run warmup iterations before timing
warmup_iterations = 3    # Number of warmup iterations to run

[tool.pytest.randomly]
# Enable random test ordering
enabled = true
# Show the seed used for reproducibility
seed = "auto"
# Randomize test collection order
randomize_by_default = true

# Pytest configuration moved to pytest.ini for consistency

[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src"] # Helps with module resolution
exclude = [
    "stubs",  # External library stubs that we don't control
    "examples",  # Example code may have different standards
    "scripts",  # Utility scripts may have different standards
    "*.yaml",  # YAML files
    "*.yml",   # YAML files
    "*.md",    # Markdown files
    "*.toml",  # TOML files
    "*.json",  # JSON files
    "*.txt",   # Text files
]

[tool.ruff.lint]
extend-select = [
  "E",    # pycodestyle errors (syntax, indentation, etc.)
  "F",    # pyflakes (logical errors, unused imports)
  "I",    # isort (import sorting)
  "B",    # flake8-bugbear (bug-prone patterns)
  "UP",   # pyupgrade (modern Python syntax)
  "SIM",  # flake8-simplify (code simplification)
  "Q",    # flake8-quotes (quote consistency)
]
ignore = [
  "E501", # Line too long (handled by Ruff formatter)
  "PLR2004", # Magic value used in comparison (mostly in tests where it's acceptable)
  "B905" # zip() without an explicit `strict=` parameter (portability concern)
]
fixable = ["ALL"] # Enables autofix where possible
unfixable = [] # Keep empty to allow all fixes

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

# Docstring conventions - optional, not enforced in CI
# [tool.ruff.lint.pydocstyle]
# convention = "google"

[tool.ruff.lint.per-file-ignores]
# Test files - relax some rules for test code
"tests/**/*.py" = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "UP038", # Allow tuple syntax in isinstance for numpy compatibility
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D200",  # One-line docstring should fit on one line
    "D205",  # 1 blank line required between summary line and description
    "D400",  # First line should end with a period
    "D401",  # First line should be in imperative mood
    "D415",  # First line should end with a period, question mark, or exclamation point
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
algokit = ["py.typed"]

# Add src to Python path for development
[tool.setuptools.package-dir]
"" = "src"

# Pytest configuration moved to pytest.ini

[tool.xenon]
max-absolute = "B"    # Maximum complexity for any single function (A=0, B=10, C=20)
max-modules = "A"     # Maximum complexity for any single module (A=0, B=10, C=20)
max-average = "A"     # Maximum average complexity across all modules (A=0, B=10, C=20)
exclude = ["tests", "examples", "scripts"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.15.1"
tag_format = "v$version"
update_changelog_on_bump = true
version_files = [
    "src/algokit/__init__.py:__version__"
]

[tool.codespell]
ignore-words-list = "algokit,jeffrichley,pyproject,bu,meger"
skip = "*.pyc,*.pyo,*.pyd,.git,*.so,*.egg,*.egg-info,.tox,.venv,htmlcov,site"
